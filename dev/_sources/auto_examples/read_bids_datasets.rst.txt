.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_read_bids_datasets.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_read_bids_datasets.py:


.. _read_bids_datasets-example:

======================
01. Read BIDS datasets
======================

When working with electrophysiological data in the BIDS format, we usually have
varying data types, which can be loaded via the ``read_raw_bids`` function.

- MEG
- EEG (scalp electrodes)
- iEEG (ECoG and SEEG)
- the anatomical MRI scan of a study participant

In this tutorial, we show how ``read_raw_bids`` can be used to load and
inspect BIDS-formatted data.


.. code-block:: default

    # Authors: Adam Li <adam2392@gmail.com>
    #          Richard HÃ¶chenberger <richard.hoechenberger@gmail.com>
    #
    # License: BSD (3-clause)








.. contents:: Contents
   :local:
   :depth: 1

Imports
-------
We are importing everything we need for this example:


.. code-block:: default

    from mne.datasets import somato

    from mne_bids import BIDSPath, read_raw_bids, print_dir_tree, make_report








We will be using the `MNE somato data <mne_somato_data_>`_, which
is already stored in BIDS format.
For more information, you can check out the
respective :ref:`example <ex-convert-mne-sample>`.

Download the ``somato`` BIDS dataset
------------------------------------

Download the data if it hasn't been downloaded already, and return the path
to the download directory. This directory is the so-called `root` of this
BIDS dataset.


.. code-block:: default

    bids_root = somato.data_path()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
    Creating ~/mne_data
    Downloading archive MNE-somato-data.tar.gz to /home/circleci/mne_data
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/59c0e2849ad5a1025d4b7346?version=7&action=download&direct (582.2 MB)
      0%|          | Downloading : 0.00/582M [00:00<?,        ?B/s]      0%|          | Downloading : 0.99M/582M [00:00<00:15,    40.6MB/s]      0%|          | Downloading : 1.99M/582M [00:00<00:14,    41.2MB/s]      1%|          | Downloading : 4.99M/582M [00:00<00:14,    42.5MB/s]      1%|1         | Downloading : 6.99M/582M [00:00<00:13,    43.5MB/s]      2%|1         | Downloading : 8.99M/582M [00:00<00:13,    44.9MB/s]      3%|2         | Downloading : 15.0M/582M [00:00<00:12,    46.3MB/s]      3%|3         | Downloading : 19.0M/582M [00:00<00:12,    46.8MB/s]      4%|3         | Downloading : 23.0M/582M [00:00<00:12,    48.1MB/s]      5%|4         | Downloading : 27.0M/582M [00:00<00:11,    49.8MB/s]      5%|5         | Downloading : 31.0M/582M [00:00<00:11,    51.6MB/s]      6%|6         | Downloading : 35.0M/582M [00:00<00:10,    52.9MB/s]      7%|6         | Downloading : 39.0M/582M [00:00<00:10,    54.4MB/s]      7%|7         | Downloading : 43.0M/582M [00:00<00:10,    56.0MB/s]      8%|8         | Downloading : 47.0M/582M [00:00<00:09,    57.3MB/s]      9%|8         | Downloading : 51.0M/582M [00:00<00:09,    58.8MB/s]      9%|9         | Downloading : 55.0M/582M [00:00<00:09,    60.2MB/s]     10%|#         | Downloading : 59.0M/582M [00:00<00:08,    62.1MB/s]     11%|#         | Downloading : 63.0M/582M [00:00<00:08,    62.9MB/s]     12%|#1        | Downloading : 67.0M/582M [00:00<00:08,    64.5MB/s]     12%|#2        | Downloading : 71.0M/582M [00:00<00:08,    66.3MB/s]     13%|#2        | Downloading : 75.0M/582M [00:00<00:07,    68.5MB/s]     14%|#3        | Downloading : 79.0M/582M [00:00<00:07,    70.2MB/s]     14%|#4        | Downloading : 83.0M/582M [00:00<00:07,    72.0MB/s]     15%|#4        | Downloading : 87.0M/582M [00:00<00:07,    73.1MB/s]     16%|#5        | Downloading : 91.0M/582M [00:00<00:06,    75.2MB/s]     16%|#6        | Downloading : 95.0M/582M [00:00<00:06,    77.4MB/s]     17%|#7        | Downloading : 99.0M/582M [00:00<00:06,    79.3MB/s]     18%|#7        | Downloading : 103M/582M [00:00<00:06,    80.3MB/s]      18%|#8        | Downloading : 107M/582M [00:00<00:06,    81.1MB/s]     19%|#9        | Downloading : 111M/582M [00:01<00:06,    82.0MB/s]     20%|#9        | Downloading : 115M/582M [00:01<00:05,    83.9MB/s]     20%|##        | Downloading : 119M/582M [00:01<00:05,    86.2MB/s]     21%|##1       | Downloading : 123M/582M [00:01<00:05,    88.5MB/s]     22%|##1       | Downloading : 127M/582M [00:01<00:05,    89.8MB/s]     22%|##2       | Downloading : 131M/582M [00:01<00:05,    91.4MB/s]     23%|##3       | Downloading : 135M/582M [00:01<00:05,    93.8MB/s]     24%|##3       | Downloading : 139M/582M [00:01<00:04,    95.9MB/s]     25%|##4       | Downloading : 143M/582M [00:01<00:04,    97.7MB/s]     25%|##5       | Downloading : 147M/582M [00:01<00:04,    97.9MB/s]     26%|##5       | Downloading : 151M/582M [00:01<00:04,    98.6MB/s]     27%|##6       | Downloading : 155M/582M [00:01<00:04,    99.1MB/s]     27%|##7       | Downloading : 159M/582M [00:01<00:04,     101MB/s]     28%|##7       | Downloading : 163M/582M [00:01<00:04,     104MB/s]     29%|##8       | Downloading : 167M/582M [00:01<00:04,     106MB/s]     29%|##9       | Downloading : 171M/582M [00:01<00:03,     108MB/s]     30%|###       | Downloading : 175M/582M [00:01<00:03,     110MB/s]     31%|###       | Downloading : 179M/582M [00:01<00:03,     109MB/s]     31%|###1      | Downloading : 183M/582M [00:01<00:03,     111MB/s]     32%|###2      | Downloading : 187M/582M [00:01<00:03,     107MB/s]     33%|###2      | Downloading : 191M/582M [00:01<00:03,     106MB/s]     33%|###3      | Downloading : 195M/582M [00:01<00:03,     107MB/s]     34%|###4      | Downloading : 199M/582M [00:01<00:03,     108MB/s]     35%|###4      | Downloading : 203M/582M [00:01<00:03,     108MB/s]     36%|###5      | Downloading : 207M/582M [00:01<00:03,     107MB/s]     36%|###6      | Downloading : 211M/582M [00:01<00:03,     108MB/s]     37%|###6      | Downloading : 215M/582M [00:01<00:03,     110MB/s]     38%|###7      | Downloading : 219M/582M [00:01<00:03,     112MB/s]     38%|###8      | Downloading : 223M/582M [00:01<00:03,     113MB/s]     39%|###8      | Downloading : 227M/582M [00:01<00:03,     114MB/s]     40%|###9      | Downloading : 231M/582M [00:02<00:03,     110MB/s]     40%|####      | Downloading : 235M/582M [00:02<00:03,     109MB/s]     41%|####1     | Downloading : 239M/582M [00:02<00:03,     110MB/s]     42%|####1     | Downloading : 243M/582M [00:02<00:03,     111MB/s]     42%|####2     | Downloading : 247M/582M [00:02<00:03,     113MB/s]     43%|####3     | Downloading : 251M/582M [00:02<00:03,     114MB/s]     44%|####3     | Downloading : 255M/582M [00:02<00:03,     114MB/s]     44%|####4     | Downloading : 259M/582M [00:02<00:02,     115MB/s]     45%|####5     | Downloading : 263M/582M [00:02<00:02,     116MB/s]     46%|####5     | Downloading : 267M/582M [00:02<00:02,     119MB/s]     47%|####6     | Downloading : 271M/582M [00:02<00:02,     120MB/s]     47%|####7     | Downloading : 275M/582M [00:02<00:02,     120MB/s]     48%|####7     | Downloading : 279M/582M [00:02<00:02,     119MB/s]     49%|####8     | Downloading : 283M/582M [00:02<00:02,     119MB/s]     49%|####9     | Downloading : 287M/582M [00:02<00:02,     118MB/s]     50%|####9     | Downloading : 291M/582M [00:02<00:02,     118MB/s]     51%|#####     | Downloading : 295M/582M [00:02<00:02,     117MB/s]     51%|#####1    | Downloading : 299M/582M [00:02<00:02,     117MB/s]     52%|#####2    | Downloading : 303M/582M [00:02<00:02,     116MB/s]     53%|#####2    | Downloading : 307M/582M [00:02<00:02,     116MB/s]     53%|#####3    | Downloading : 311M/582M [00:02<00:02,     117MB/s]     54%|#####4    | Downloading : 315M/582M [00:02<00:02,     119MB/s]     55%|#####4    | Downloading : 319M/582M [00:02<00:02,     120MB/s]     55%|#####5    | Downloading : 323M/582M [00:02<00:02,     118MB/s]     56%|#####6    | Downloading : 327M/582M [00:02<00:02,     120MB/s]     57%|#####6    | Downloading : 331M/582M [00:02<00:02,     122MB/s]     58%|#####7    | Downloading : 335M/582M [00:02<00:02,     122MB/s]     58%|#####8    | Downloading : 339M/582M [00:02<00:02,     124MB/s]     59%|#####8    | Downloading : 343M/582M [00:02<00:01,     126MB/s]     60%|#####9    | Downloading : 347M/582M [00:02<00:01,     127MB/s]     60%|######    | Downloading : 351M/582M [00:02<00:01,     126MB/s]     61%|######    | Downloading : 355M/582M [00:03<00:01,     124MB/s]     62%|######1   | Downloading : 359M/582M [00:03<00:01,     122MB/s]     62%|######2   | Downloading : 363M/582M [00:03<00:01,     121MB/s]     63%|######3   | Downloading : 367M/582M [00:03<00:01,     121MB/s]     64%|######3   | Downloading : 371M/582M [00:03<00:01,     119MB/s]     64%|######4   | Downloading : 375M/582M [00:03<00:01,     121MB/s]     65%|######5   | Downloading : 379M/582M [00:03<00:01,     122MB/s]     66%|######5   | Downloading : 383M/582M [00:03<00:01,     122MB/s]     66%|######6   | Downloading : 387M/582M [00:03<00:01,     123MB/s]     67%|######7   | Downloading : 391M/582M [00:03<00:01,     126MB/s]     68%|######7   | Downloading : 395M/582M [00:03<00:01,     128MB/s]     69%|######8   | Downloading : 399M/582M [00:03<00:01,     129MB/s]     69%|######9   | Downloading : 403M/582M [00:03<00:01,     131MB/s]     70%|######9   | Downloading : 407M/582M [00:03<00:01,     130MB/s]     71%|#######   | Downloading : 411M/582M [00:03<00:01,     130MB/s]     71%|#######1  | Downloading : 415M/582M [00:03<00:01,     133MB/s]     72%|#######1  | Downloading : 419M/582M [00:03<00:01,     128MB/s]     73%|#######2  | Downloading : 423M/582M [00:03<00:01,     121MB/s]     73%|#######3  | Downloading : 427M/582M [00:03<00:01,     117MB/s]     74%|#######4  | Downloading : 431M/582M [00:03<00:01,     114MB/s]     75%|#######4  | Downloading : 435M/582M [00:03<00:01,     109MB/s]     75%|#######5  | Downloading : 439M/582M [00:03<00:01,     109MB/s]     76%|#######6  | Downloading : 443M/582M [00:03<00:01,     108MB/s]     77%|#######6  | Downloading : 447M/582M [00:03<00:01,     102MB/s]     77%|#######7  | Downloading : 451M/582M [00:04<00:01,     102MB/s]     78%|#######8  | Downloading : 455M/582M [00:04<00:01,     104MB/s]     79%|#######8  | Downloading : 459M/582M [00:04<00:01,     104MB/s]     80%|#######9  | Downloading : 463M/582M [00:04<00:01,     104MB/s]     80%|########  | Downloading : 467M/582M [00:04<00:01,     103MB/s]     81%|########  | Downloading : 471M/582M [00:04<00:01,     104MB/s]     82%|########1 | Downloading : 475M/582M [00:04<00:01,     105MB/s]     82%|########2 | Downloading : 479M/582M [00:04<00:01,     106MB/s]     83%|########2 | Downloading : 483M/582M [00:04<00:00,     107MB/s]     84%|########3 | Downloading : 487M/582M [00:04<00:00,     105MB/s]     84%|########4 | Downloading : 491M/582M [00:04<00:00,     105MB/s]     85%|########5 | Downloading : 495M/582M [00:04<00:00,     105MB/s]     86%|########5 | Downloading : 499M/582M [00:04<00:00,     106MB/s]     86%|########6 | Downloading : 503M/582M [00:04<00:00,     103MB/s]     87%|########7 | Downloading : 507M/582M [00:04<00:00,     102MB/s]     88%|########7 | Downloading : 511M/582M [00:04<00:00,     103MB/s]     88%|########8 | Downloading : 515M/582M [00:04<00:00,     104MB/s]     89%|########9 | Downloading : 519M/582M [00:04<00:00,     104MB/s]     90%|########9 | Downloading : 523M/582M [00:04<00:00,     104MB/s]     91%|######### | Downloading : 527M/582M [00:04<00:00,     104MB/s]     91%|#########1| Downloading : 531M/582M [00:04<00:00,     104MB/s]     92%|#########1| Downloading : 535M/582M [00:04<00:00,     105MB/s]     93%|#########2| Downloading : 539M/582M [00:04<00:00,     107MB/s]     93%|#########3| Downloading : 543M/582M [00:04<00:00,     109MB/s]     94%|#########3| Downloading : 547M/582M [00:04<00:00,     111MB/s]     95%|#########4| Downloading : 551M/582M [00:04<00:00,     112MB/s]     95%|#########5| Downloading : 555M/582M [00:04<00:00,     113MB/s]     96%|#########6| Downloading : 559M/582M [00:05<00:00,     115MB/s]     97%|#########6| Downloading : 563M/582M [00:05<00:00,     116MB/s]     97%|#########7| Downloading : 567M/582M [00:05<00:00,     118MB/s]     98%|#########8| Downloading : 571M/582M [00:05<00:00,     119MB/s]     99%|#########8| Downloading : 575M/582M [00:05<00:00,     118MB/s]     99%|#########9| Downloading : 579M/582M [00:05<00:00,     119MB/s]    100%|##########| Downloading : 582M/582M [00:05<00:00,     121MB/s]    100%|##########| Downloading : 582M/582M [00:05<00:00,     118MB/s]
    Verifying hash 32fd2f6c8c7eb0784a1de6435273c48b.
    Decompressing the archive: /home/circleci/mne_data/MNE-somato-data.tar.gz
    (please be patient, this can take some time)
    Successfully extracted to: ['/home/circleci/mne_data/MNE-somato-data']
    Attempting to create new mne-python configuration file:
    /home/circleci/.mne/mne-python.json




Explore the dataset contents
----------------------------

We can use MNE-BIDS to print a tree of all
included files and folders. We pass the ``max_depth`` parameter to
`mne_bids.print_dir_tree` to the output to three levels of folders, for
better readability in this example.


.. code-block:: default


    print_dir_tree(bids_root, max_depth=3)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    |MNE-somato-data/
    |--- CHANGES
    |--- README
    |--- dataset_description.json
    |--- participants.json
    |--- participants.tsv
    |--- code/
    |------ README
    |------ convert_somato_data.py
    |--- derivatives/
    |------ freesurfer/
    |--------- subjects/
    |------ sub-01/
    |--------- sub-01_task-somato-fwd.fif
    |--- sub-01/
    |------ sub-01_scans.tsv
    |------ anat/
    |--------- sub-01_T1w.json
    |--------- sub-01_T1w.nii.gz
    |------ meg/
    |--------- sub-01_coordsystem.json
    |--------- sub-01_task-somato_channels.tsv
    |--------- sub-01_task-somato_events.tsv
    |--------- sub-01_task-somato_meg.fif
    |--------- sub-01_task-somato_meg.json




We can even ask MNE-BIDS to produce a human-readbale summary report
on the dataset contents.


.. code-block:: default


    print(make_report(bids_root))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Summarizing participants.tsv /home/circleci/mne_data/MNE-somato-data/participants.tsv...
    Summarizing scans.tsv files [PosixPath('/home/circleci/mne_data/MNE-somato-data/sub-01/sub-01_scans.tsv')]...
    The participant template found: comprised of 1 men and 0 women;
    handedness were all unknown; ages all unknown
    The MNE-somato-data-bids dataset was created with BIDS version 1.2.0 by Lauri
    Parkkonen. This report was generated with MNE-BIDS
    (https://doi.org/10.21105/joss.01896). The dataset consists of 1 participants
    (comprised of 1 men and 0 women; handedness were all unknown; ages all unknown).
    Data was recorded using a MEG system (Elekta manufacturer) sampled at 300.31 Hz
    with line noise at 50 Hz. There was 1 scan in total. Recording durations ranged
    from 897.08 to 897.08 seconds (mean = 897.08, std = 0.0), for a total of 897.08
    seconds of data recorded over all scans. For each dataset, there were on average
    316.0 (std = 0.0) recording channels per scan, out of which 316.0 (std = 0.0)
    were used in analysis (0.0 +/- 0.0 were removed from analysis).




Now it's time to get ready for reading some of the data! First, we need to
create a `mne_bids.BIDSPath`, which is the working horse object of MNE-BIDS
when it comes to file and folder operations.

For now, we're interested only in the MEG data in the BIDS root directory
of the ``somato`` dataset.


.. code-block:: default


    datatype = 'meg'
    bids_path = BIDSPath(root=bids_root, datatype=datatype)








We can now retrieve a list of all MEG-related files in the dataset:


.. code-block:: default


    print(bids_path.match())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [BIDSPath(
    root: /home/circleci/mne_data/MNE-somato-data
    datatype: meg
    basename: sub-01_task-somato_channels.tsv), BIDSPath(
    root: /home/circleci/mne_data/MNE-somato-data
    datatype: meg
    basename: sub-01_task-somato_events.tsv), BIDSPath(
    root: /home/circleci/mne_data/MNE-somato-data
    datatype: meg
    basename: sub-01_task-somato_meg.fif)]




The returned list contains ``BIDSpaths`` of 3 files:
``sub-01_task-somato_channels.tsv``, ``sub-01_task-somato_events.tsv``, and
``sub-01_task-somato_meg.fif``.
The first two are so-called sidecar files that contain information on the
recording channels and experimental events, and the third one is the actual
MEG data file.

Prepare reading the data
------------------------

There is obviously only one subject (``01``) and one experimental task
(``somato``). Let's use this knowledge to create a new ``BIDSPath`` with
all the information required to actually read the MEG data. We also need to
pass a ``suffix``, which is the last part of the filename just before the
extension -- ``'channels'`` and ``'events'`` for the two TSV files in
our example, and ``'meg'`` for MEG raw data. For MEG and EEG raw data, the
suffix is identical to the datatype, so don't let yourselve be confused here!


.. code-block:: default


    bids_root = somato.data_path()
    datatype = 'meg'
    subject = '01'
    task = 'somato'
    suffix = 'meg'

    bids_path = BIDSPath(subject=subject, task=task, suffix=suffix,
                         datatype=datatype, root=bids_root)








Now let's print the contents of ``bids_path``.


.. code-block:: default


    print(bids_path)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif




You probably noticed two things: Firstly, this looks like an ordinary string
now, not like the more-or-less neatly formatted output we saw before. And
secondly, that there's suddenly a filename extension which we never specified
anywhere!

The reason is that when you call ``print(bids_path)``, ``BIDSPath`` returns
a string representation of ``BIDSPath.fpath``, which looks different. If,
instead, you simply typed ``bids_path`` (or ``print(repr(bids_path))``, which
is the same) into your Python console, you would get the nicely formatted
output:


.. code-block:: default


    bids_path





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    BIDSPath(
    root: /home/circleci/mne_data/MNE-somato-data
    datatype: meg
    basename: sub-01_task-somato_meg)



The ``root`` here is âÂ you guessed it â the directory we passed via the
``root`` parameter: the "home" of our BIDS dataset. The ``datatype``, again,
is self-explanatory. The ``basename``, on the other hand, is created
automatically based on the suffix and **BIDS entities**  we passed to
``BIDSPath``: in our case, ``subject`` and ``task``.

.. note::
  There are many more supported entities, the most-commonly used among them
  probably being ``session``. Please see
  :ref:`our introduction to BIDSPath <bidspath-example>` to learn more
  about entities, ``basename``, and ``BIDSPath`` in general.

But what about that filename extension, now? ``BIDSPath.fpath``, which â
as you hopefully remember âÂ is invoked when you run ``print(bids_path)`` â
employs some heuristics to auto-detect some missing filename components.
Omitting the filename extension in your script can make your code
more portable. Note that, however, you **can** explicitly specify an
extension too, by passing e.g. ``extension='.fif'`` to ``BIDSPath``.

Read the data
-------------

Let's read the data! It's just a single line of code.


.. code-block:: default


    raw = read_raw_bids(bids_path=bids_path, verbose=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/circleci/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading events from /home/circleci/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_events.tsv.
    Reading channel info from /home/circleci/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_channels.tsv.
    /home/circleci/project/mne_bids/read.py:337: RuntimeWarning: The unit for channel(s) STI 001, STI 002, STI 003, STI 004, STI 005, STI 006, STI 014, STI 015, STI 016 has changed from V to NA.
      raw.set_channel_types(channel_type_dict)




Now we can inspect the ``raw`` object to check that it contains to correct
metadata.

Basic subject metadata is here.


.. code-block:: default


    print(raw.info['subject_info'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'id': 175, 'sex': 1, 'participant_id': 'sub-01', 'age': 'n/a'}




Power line frequency is here.


.. code-block:: default


    print(raw.info['line_freq'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    50




Sampling frequency is here.


.. code-block:: default


    print(raw.info['sfreq'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    300.3074951171875




Events are now Annotations


.. code-block:: default

    print(raw.annotations)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <Annotations | 111 segments: somato_event1 (111)>




Plot the raw data.


.. code-block:: default


    raw.plot()




.. image:: /auto_examples/images/sphx_glr_read_bids_datasets_001.png
    :alt: read bids datasets
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <MNEBrowseFigure size 640x480 with 4 Axes>



.. LINKS

.. _mne_somato_data:
   https://mne.tools/dev/generated/mne.datasets.somato.data_path.html



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.418 seconds)


.. _sphx_glr_download_auto_examples_read_bids_datasets.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/mne-tools/mne-bids/gh-pages?filepath=dev/notebooks/auto_examples/read_bids_datasets.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: read_bids_datasets.py <read_bids_datasets.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: read_bids_datasets.ipynb <read_bids_datasets.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
